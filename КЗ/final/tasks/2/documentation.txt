
Информация о приложении:
Данное приложение является интерактивной игрой, где пользователь может контактировать с игровым объектом - белым кружочком. 
В начале игры кружочек появляется в центре игрового поля и двигается в случайном направлении со случайной скоротью. 
При каждом соприкосновении кружочка с объектом, как с вирутальными (стенами и корзиной на игровом поле) так и с реальными (черной и синей линией от маркера).
Цель игры: загнать кружочек внуть корзины. 
После каждого попадания игра просит стереть все линии от маркера и нажать на любую клавишу, чтобы перезапустить игру. Счетчик очков увеличивается на 1.
Чтобы выйти из игры, нужно нажать на кнопку "ESC". Чтобы перезапустить кружочек, нужно нажать на кнопку "R".
Информация дублируется в самой игре для пользователя.

Доп. информация:
В начале программы происходит калибровка камеры, чтобы не было искажения. На протяжении всей игры не желательно двигать маркерную доску или камеру с проектором.
После этого создается окно запуска и игровое окно, которое требуется переместить на экран проектора и включить полноэкранный режим.

Структура проекта:
| main.py - Основная программа. Используемые библиотеки:
  @ math - для работы с тригонометрией. Пример на строчках: 176-177.
  @ time - для фиксирования текущего времени. Пример на строчках: 283-287.
  @ random - для получения случайного направления движения кружочка и его скорости. Пример на строчках: 233-235.
  @ numpy - для работы с изображениями и быстрыми математическими вычислениями. Пример на строчках: 169-172.
  @ cv2 - для детальной работы с изображениями и их выводом на экран. Пример на строчках: 242-249.
  @ screeninfo - для получения разрешения второго экрана, чтобы игровое поле было нужного размера. Пример на строчках: 272-273.
  @ const, calib, devices, objects, funcs - нужные модули для работы приложения.
| objects.py - Модуль с классами игровых объектов и их характеристик.
| funcs.py - Модуль с сложными математическими функциями.
  @ numpy - для работы с быстрыми математическими вычислениями. Пример на строчках: 8.
| devices.py - Модуль с классами внешних устройств.
  @ numpy - для перевода данных в другой формат, более удобный для opencv. Пример на строчках: 30-31.
  @ cv2 - для получения изображения с веб-камеры и изменения перспективы изображения. Пример на строчках: 37-38.
| const.py - Модуль с константами (неизменяемыми переменными).
| calib.py - Модуль с функциями калибровки камеры и изображения проекции проектора.
  @ cv2 - для вывода изображений на экран и отрисовки объектов на изображении. Пример на строчках: 26-27.
  @ const - модуль для получения цветов объектов и текста.
| requirements.txt - Список необходимых библиотек.

Порядок действия эксперта:
1. Оценивать программу в кабинете 012 на переносной доске (пожаааалуйста)).

Порядок действия пользователя:
1. Подключить проектор к компьютеру и включить режим расширенного экрана.
1.1 Для проектора желательно выставить разрешение 1400x1050, чтобы не было искажения со стороны opencv (из-за полноэкранного режима).
2. Установить нужные библиотеки (в файле requirements.txt).
3. Внутри файла main.py, в самом низу программы изменить индекс камеры на нужный в переменной "cameraIndex" и изменить флаг "systemIsWindows" на "True", если система Windows.
4. Выставить на компьютере английский язык (в программе присутствует ввод с клавиш для управления игровым процессом).
5. Запустить файл main.py.
6. Откалибровать камеру, указав на появившемся окне, где выводится изображение с веб-камеры, 4 угловые точки изображения проекции проектора.
7. Переместить за 15 секунд (время, когда не работает пауза) окно с игровым полем на экран проектора и нажать на "Пробел", чтобы сделать полноэкранный режим.
